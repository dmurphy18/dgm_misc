#!/usr/bin/bash

SCRIPT_VERSION=2016.02.19

## using bash for now to test, needs to be ksh eventuaklly for AIX

set -o functrace

## helper functions

_timestamp() {
    date "+%Y-%m-%d %H:%M:%S:"
}

_log() {
    echo "$1" | sed "s/^/$(_timestamp) /" >>"$log_file"
}

# Both echo and log
_display() {
    echo "$1"
    _log "$1"
}

_error() {
    msg="ERROR: $1"
    echo "$msg" 1>&2
    echo "$(_timestamp) $msg" >>"$log_file"
    echo "One or more errors found. See $log_file for details." 1>&2
    exit 1
}

_warning() {
    msg="WARNING: $1"
    echo "$msg" 1>&2
    echo "$(_timestamp) $msg" >>"$log_file"
}

# this find/grep will have to be modified for running on AIX
_get_list_of_sym_linked_files() {
    symlinkfilelist=$(find . -type l -print)
}


# AIX installp doesn't handle symlinks, so have to scripts to
# create symlink'd files post install and removal of fileset

_gen_post_install_remove_scripts() {

## TODO - cannot have the files with your absolute directory paths
##          also need to ensure the salt_p* files are copied to
##          mkinstallp build area

    echo "#!/usr/bin/ksh" > "${post_install_file}"
    chmod 755 "${post_install_file}"

##    echo "#!/usr/bin/ksh" > "${uninstall_rm_file}"
##    chmod 755 "${uninstall_rm_file}"

    echo "ln -s /opt/salt/etc/salt /etc/salt" >> "${post_install_file}"

    for afile in ${symlinkfilelist}
    do
        opt_prefix="/opt/salt"
        symlinkfilelist_target=$(ls -l "${afile}" | cut -d '>' -f 2 | awk -F"opt" '{print $2}' | sed "s/^\/freeware//")
        if test -z "${symlinkfilelist_target}"; then
          opt_prefix=
          symlinkfilelist_target=$(ls -l "${afile}" | cut -d '>' -f 2)
        fi
        absdir=$( dirname  ${afile} | sed 's/^\.//')
        absfile=$( echo ${afile} | sed 's/^\.//')

        echo "mkdir -p ${absdir}" >> "${post_install_file}"
        echo "cd ${absdir}" >> "${post_install_file}"
        if test ! -z "${symlinkfilelist_target}"; then
          echo "ln -f -s "${opt_prefix}${symlinkfilelist_target}" ${absfile}" >> "${post_install_file}"
        fi
##        echo "rm -f ${absfile}" >> ${uninstall_rm_file}
    done

    # restore orignal config files, if existed
##    echo "${restore_conf_pathfile}" >> ${post_install_file}
}


_remove_symlinkd_files() {
    for afile in ${symlinkfilelist}
    do
        ## _display "removing symbolic file '${afile}'"
        rm -f "${afile}"
    done
}


# this find/grep will have to be modified for running on AIX
_gen_list_of_root_files() {
     root_filelist=$(find . -type f | grep -v '^\./usr' | sed 's/^\.//')
}


# this find/grep will have to be modified for running on AIX
_gen_list_of_usr_files() {
    usr_filelist=$(find . -type f | grep '^\./usr' | sed 's/^\.//')
}

# this find/grep will have to be modified for running on AIX
_gen_list_of_conf_files() {
    conf_filelist=$(find . -type f | grep '^\./opt/salt/etc/salt' | sed 's/^\.//')
}

_gen_conf_files_override_boilerplate() {
    echo "  owner =" >>"${conf_override_file}"
    echo "  group =" >>"${conf_override_file}"
    echo "  mode =" >>"${conf_override_file}"
    echo "  type =" >>"${conf_override_file}"
    echo "  class =" >>"${conf_override_file}"
    echo "  size = VOLATILE" >>"${conf_override_file}"
    echo "  checksum = VOLATILE" >>"${conf_override_file}"
    echo "  " >>"${conf_override_file}"
}


_gen_conf_files_override() {
    for idx in ${conf_filelist}
    do
        echo "./${idx}:" >>"${conf_override_file}"
        _gen_conf_files_override_boilerplate
##         localname=$(basename ${idx})
##         echo "./${confsavedir}/${localname}:" >>"${conf_override_file}"
##         _gen_conf_files_override_boilerplate
    done
}


## generate a .cfgfiles to tell bff packaging that
## the config files should be preserved/auto_merged etc.
## run after _gen_conf_files_override

## _gen_conf_files_preserve() {
##     for idx in ${conf_filelist}
##     do
##         echo "/${idx} auto_merge" >> ${cfgfiles_pathfile}
##         localname=$(basename ${idx})
##         echo "/${confsavedir}/${localname} auto_merge" >> ${cfgfiles_pathfile}
##     done
## }


## _gen_usr_pre_rm_file and run after _gen_conf_files_override

## _gen_usr_pre_rm_file() {
##     cat <<@EOF >"${usr_pre_rm_wrkfile}"
## #!/usr/bin/ksh -x
## 
## # saves any pre-existing salt configuration files in /opt/salt/etc/salt
## echo "DGM PRE_RM enter"
## lconf_filelist='${conf_filelist}'
## 
## if [ -d /opt/salt/etc/salt ]
## then
##     echo "DGM PRE_RM copy"
##     mkdir -p ${confsavedir}
##     for idx in \${lconf_filelist}
##     do
##         cp -f \${idx} ${confsavedir}
##     done
## fi
## echo "DGM PRE_RM exit"
## @EOF
## }

_gen_restore_conf_files() {
    cat <<@EOF >"${restore_conf_wrkfile}"
#!/usr/bin/ksh -x

## echo "DGM restore_conf enter"
# restores any pre-existing salt configuration files
# in ${confsavedir} in /opt/salt/etc/salt

if [ -d ${confsavedir} ]
then
    mkdir -p /opt/salt/etc/salt
    for idx in \`ls ${confsavedir}\`
    do
        cp  "${confsavedir}/\${idx}" /opt/salt/etc/salt/
    done
fi
## echo "DGM restore_conf exit"
@EOF
}


## removed the pre cleanup file
##  Pre_rm Script: ${uninstall_rm_file}
##  Pre_rm Script: ${usr_pre_rm_wrkfile}

_gen_installp_template() {
    cat <<@EOF >"${INSTALLP_TEMPLATE}"
Package Name: ${SALT_NAME}
Package VRMF: ${SALT_VERSION}
Update: N
Fileset
  Fileset Name: ${SALT_NAME}.rte
  Fileset VRMF: ${SALT_VERSION}
  Fileset Description: SaltStack Enterprise for AIX
  USRLIBLPPFiles
  EOUSRLIBLPPFiles
  ROOTLIBLPPFiles
  Post-installation Script: ${post_install_file}
  EOROOTLIBLPPFiles
  Bosboot required: N
  License agreement acceptance required: N
  Include license files in this package: N
  Requisites:
  Upsize: / 90000; /usr 1000;
  USRFiles
@EOF

    for idx in ${usr_filelist}
    do
        echo "    ${idx}" >>"${INSTALLP_TEMPLATE}"
    done

    cat <<@EOF >>"${INSTALLP_TEMPLATE}"
  EOUSRFiles
  ROOT Part: Y
  ROOTFiles
@EOF

    for idx in ${root_filelist}
    do
        echo "    ${idx}" >>"${INSTALLP_TEMPLATE}"
    done

    cat <<@EOF >>"${INSTALLP_TEMPLATE}"
  EOROOTFiles
  OVERRIDE_INVENTORY: ${conf_override_file}
  Relocatable: N
EOFileset
@EOF

}

## # copies salt configuration files in /opt/salt/etc/salt
## # to usr/salt_archive
## _copy_conf_files_to_use() {
## echo "DGM copy conf to usr enter"
## 
## if [ -d ${wrkdir}/opt/salt/etc/salt ]
## then
##     mkdir -p ${wrkdir}/${confsavedir}
##     for idx in ${conf_filelist}
##     do
##         cp -f ${wrkdir}/${idx} ${wrkdir}/${confsavedir}
##     done
## fi
## echo "DGM copy conf to usr exit"
## }


#################################### MAIN ####################################

# static definitions

log_file_format="${HOME}/gen_inst_template.%Y%m%d%H%M%S.log"
log_file="`date \"+${log_file_format}\"`"

base_dir="${HOME}/prep_rte_area"
if test ! -d  "${base_dir}"; then
  mkdir -p "${base_dir}"
fi

wrkdir="${base_dir}"
if test ! -d  "${wrkdir}"; then
  mkdir -p "${wrkdir}"
fi

confsavedir="/usr/salt/salt_archive"

## ## usr_pre_rm_dir="/opt/salt/install"
## usr_pre_rm_dir="/usr/salt/salt_archive"
## usr_pre_rm_file="salt_usr_pre_rm"
## usr_pre_rm_pathfile="${usr_pre_rm_dir}/${usr_pre_rm_file}"
## usr_pre_rm_wrkdir="${wrkdir}${usr_pre_rm_dir}"
## if test ! -d  "${usr_pre_rm_wrkdir}"; then
##   mkdir -p "${usr_pre_rm_wrkdir}"
## fi
## usr_pre_rm_wrkfile="${usr_pre_rm_wrkdir}/${usr_pre_rm_file}"
## 
## #ensure file exist for scans below
## touch ${usr_pre_rm_wrkfile}
## chmod 0755 ${usr_pre_rm_wrkfile}

## restore_conf_dir="/opt/salt/install/"
## restore_conf_file="salt_restore_conf"
## restore_conf_pathfile="${restore_conf_dir}/${restore_conf_file}"
## restore_conf_wrkdir="${wrkdir}${restore_conf_dir}"
## if test ! -d  "${restore_conf_wrkdir}"; then
##   mkdir -p "${restore_conf_wrkdir}"
## fi
## restore_conf_wrkfile="${restore_conf_wrkdir}/${restore_conf_file}"
## 
## #ensure file exist for scans below
## touch ${restore_conf_wrkfile}
## chmod 0755 ${restore_conf_wrkfile}


## cfgfiles_dir=".info"
## cfgfiles_file="salt.rte.cfgfiles"
## cfgfiles_pathfile="${wrkdir}/${cfgfiles_dir}/${cfgfiles_file}"
## if test ! -d  "${wrkdir}/${cfgfiles_dir}"; then
##   mkdir -p "${wrkdir}/${cfgfiles_dir}"
## fi
## 
## #ensure file exist for scans below
## touch ${cfgfiles_pathfile}


post_install_dir="${wrkdir}/opt/salt/install"
if test ! -d  "${post_install_dir}"; then
  mkdir -p "${post_install_dir}"
fi
post_install_file="${post_install_dir}/salt_postinstall_i"
conf_override_file="${post_install_dir}/salt_override.inv"

#ensure file exist for scans below
touch ${post_install_file}
chmod 0755 ${post_install_file}
touch ${conf_override_file}


SALT_NAME="salt"
## keep version 4 digits
SALT_VERSION="16.3.3.2"

INSTALLP_TEMPLATE="${base_dir}/${SALT_NAME}.template"
## uninstall_rm_file="${wrkdir}/opt/salt/bin/salt_pre_rm"

# global vars
initialldir=
root_filelist=
usr_filelist=
conf_filelist=

#script main body

initialdir=$(pwd)
cd "$wrkdir"

# generate post install and removal cleanup scripts
# which handle symlink issues
_get_list_of_sym_linked_files
_gen_post_install_remove_scripts
_remove_symlinkd_files

# now  create template as syymlink'd files removed
_gen_list_of_conf_files

# DGM crazy stuff
## _copy_conf_files_to_use

_gen_list_of_root_files
_gen_list_of_usr_files

_gen_conf_files_override

## _gen_conf_files_preserve
## _gen_usr_pre_rm_file
## _gen_restore_conf_files

_gen_installp_template

